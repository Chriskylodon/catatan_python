note:
- program -> file -> class/function/object/argument/ biasa(print(s))
- block -> untuk statement husus, biasa terjadi error jika tida diberi block
- break line -> 
- 






OPERASI:

Python Arithmetic Operators

x = 20
y = 6
print('x + y =',x+y)
print('x - y =',x-y)
print('x * y =',x*y)
print('x / y =',x/y)
print('x // y =',x//y)
print('x % y =',x%y)
print('x ** y =',x**y)



Python Assignment Operators

Operator	Example		Same As
=		x = 5		x = 5	
+=		x += 3		x = x + 3	
-=		x -= 3		x = x - 3	
*=		x *= 3		x = x * 3	
/=		x /= 3		x = x / 3	
%=		x %= 3		x = x % 3	
//=		x //= 3		x = x // 3	
**=		x **= 3		x = x ** 3	
&=		x &= 3		x = x & 3	
|=		x |= 3		x = x | 3	
^=		x ^= 3		x = x ^ 3	
>>=		x >>= 3		x = x >> 3	
<<=		x <<= 3		x = x << 3	



Python Comparison Operators

Operator	Name				Example	
==		Equal				x == y	
!=		Not equal			x != y	
>		Greater than			x > y	
<		Less than			x < y	
>=		Greater than or equal to	x >= y	
<=		Less than or equal to		x <= y



Python Logical Operators

Operator	Description							Example	Try it
and 		Returns True if both statements are true			x < 5 and  x < 10	
or		Returns True if one of the statements is true			x < 5 or x < 4	
not		Reverse the result, returns False if the result is true		not(x < 5 and x < 10)



Python Identity Operators

Operator	Description						Example
is 		Returns True if both variables are the same object	x is y	
is not		Returns True if both variables are not the same object	x is not y



Python Membership Operators

Operator	Description										Example	
in 		Returns True if a sequence with the specified value is present in the object		x in y	
not in		Returns True if a sequence with the specified value is not present in the object	x not in y




Python Bitwise Operators

Operator	Name			Description
& 		AND			Sets each bit to 1 if both bits are 1
|		OR			Sets each bit to 1 if one of two bits is 1
 ^		XOR			Sets each bit to 1 if only one of two bits is 1
~ 		NOT			Inverts all the bits
<<		Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off
>>		Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off


Python if... else...

Equals: a == b
Not Equals: a != b
Less than: a < b
Less than or equal to: a <= b
Greater than: a > b
Greater than or equal to: a >= b

a = 33
b = 200
if b > a:
  print("b is greater than a")

a = 33
b = 200
if b > a:
print("b is greater than a") # you will get an error

a = 33
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")

a = 200
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")

a = 200
b = 33
if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")



#shorthand
if a > b: print("a is greater than b")

a = 2
b = 330
print("A") if a > b else print("B")

a = 330
b = 330
print("A") if a > b else print("=") if a == b else print("B")

#logical 
a = 200
b = 33
c = 500
if a > b and c > a:
  print("Both conditions are True")

a = 200
b = 33
c = 500
if a > b or a > c:
  print("At least one of the conditions is True")

a = 200
b = 33
c = 500
if a > b or a > c:
  print("At least one of the conditions is True")

#nested if
x = 41
if x > 10:
  print("Above ten,")
  if x > 20:
    print("and also above 20!")
  else:
    print("but not above 20.")

#pass
a = 33
b = 200
if b > a:
  pass



#while loop
while ...expression... :
	...statement...	



#for loop
for ...iterating var... in ...sequence... :
	...statement...

for i in range(5):
	print(i)

fruits = ['banana', 'apple', 'mango']
for fruit in fruits:
	print('Current fruit : ', fruit)

for i in range(len(fruits)):
	print(fruits[i])


#nested loop
for i in range(5):
	for j in range(3):
		print("BAB ", i, " Sub BAB ", j)

print('BAB (i) dan sub BAB (j)')



fase_belajar = ['suka', 'mencari tahu', 'mempelajari', 'menerapkan', 'mengajarkan']
for fase in fase_belajar:
	if fase == 'menerapkan':
		continue
	print("fase_belajar = ", fase)



for i in 'shiftAcademy':
	if i == 'A':
		pass
		print('-'*10)
		print("huruf saat ini : ")


for i in range(5):
	for j in range(5:1:-1):
		z += ' - '
	z += '\n'

for i in range(5):
	for j in range(2:5:1):
		z += ' - '
	z += '\n'



#list
mylist = ["apple", "banana", "cherry"]
thislist = ["apple", "banana", "cherry"]
print(thislist)

thislist = ["apple", "banana", "cherry"]
print(len(thislist))

list1 = ["apple", "banana", "cherry"]
list2 = [1, 5, 7, 9, 3]
list3 = [True, False, False]

list1 = ["abc", 34, True, 40, "male"]

mylist = ["apple", "banana", "cherry"]
print(type(mylist))

thislist = list(("apple", "banana", "cherry")) # note the double round-brackets
print(thislist)


Method		Description
append()	Adds an element at the end of the list
clear()		Removes all the elements from the list
copy()		Returns a copy of the list
count()		Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()		Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()		Removes the element at the specified position
remove()	Removes the first item with the specified value
reverse()	Reverses the order of the list
sort()		Sorts the list

for x in cars:
  print(x)

cars.append("Honda")

cars.pop(1)

cars.remove("Volvo")



x = int(1)   # x will be 1
y = int(2.8) # y will be 2
z = int("3") # z will be 3

x = float(1)     # x will be 1.0
y = float(2.8)   # y will be 2.8
z = float("3")   # z will be 3.0
w = float("4.2") # w will be 4.2

x = str("s1") # x will be 's1'
y = str(2)    # y will be '2'
z = str(3.0)  # z will be '3.0'






Python Class and Object

#class1

class MyClass:
  x = 5

#class2
p1 = MyClass()
print(p1.x)

#class3
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)
print(p1.age)







#object1

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)
p1.myfunc()

#self parameter
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()

#modify
p1.age = 40

#delete object properties
del p1.age

#delete object
del p1

#pass
class Person:
  pass





#creating function
def my_function():
  print("Hello from a function")

#callng function
def my_function():
  print("Hello from a function")

my_function()

#argument
def my_function(fname):
  print(fname + " Refsnes")

my_function("Emil")
my_function("Tobias")
my_function("Linus")





exceptions:

try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")

try:
  print("Hello")
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")

try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")

try:
  f = open("demofile.txt")
  f.write("Lorum Ipsum")
except:
  print("Something went wrong when writing to the file")
finally:
  f.close()

x = -1
if x < 0:
  raise Exception("Sorry, no numbers below zero")

x = "hello"
if not type(x) is int:
  raise TypeError("Only integers are allowed")






files:

The key function for working with files in Python is the open() function.
The open() function takes two parameters; filename, and mode.
There are four different methods (modes) for opening a file:
"r" - Read - Default value. Opens a file for reading, error if the file does not exist
"a" - Append - Opens a file for appending, creates the file if it does not exist
"w" - Write - Opens a file for writing, creates the file if it does not exist
"x" - Create - Creates the specified file, returns an error if the file exists

In addition you can specify if the file should be handled as binary or text mode
"t" - Text - Default value. Text mode
"b" - Binary - Binary mode (e.g. images)




To open a file for reading it is enough to specify the name of the file:
f = open("demofile.txt")

The code above is the same as:
f = open("demofile.txt", "rt")




open file on the server:

demofile.txt

Hello! Welcome to demofile.txt
This file is for testing purposes.
Good Luck!


f = open("demofile.txt", "r")
print(f.read())

f = open("D:\\myfiles\welcome.txt", "r")
print(f.read())

read only parts of the file:
f = open("demofile.txt", "r")
print(f.read(5))



readlines:
f = open("demofile.txt", "r")
print(f.readline())

f = open("demofile.txt", "r")
print(f.readline())
print(f.readline())

f = open("demofile.txt", "r")
for x in f:
  print(x)




close files:
f = open("demofile.txt", "r")
print(f.readline())
f.close()




To write to an existing file, you must add a parameter to the open() function:

"a" - Append - will append to the end of the file

"w" - Write - will overwrite any existing content


Open the file "demofile2.txt" and append content to the file:

f = open("demofile2.txt", "a")
f.write("Now the file has more content!")
f.close()

#open and read the file after the appending:
f = open("demofile2.txt", "r")
print(f.read())




f = open("demofile3.txt", "w")
f.write("Woops! I have deleted the content!")
f.close()

#open and read the file after the appending:
f = open("demofile3.txt", "r")
print(f.read())



Create a New File
To create a new file in Python, use the open() method, with one of the following parameters:

"x" - Create - will create a file, returns an error if the file exist
"a" - Append - will create a file if the specified file does not exist
"w" - Write - will create a file if the specified file does not exist

f = open("myfile.txt", "x")

f = open("myfile.txt", "w")



delete files:
import os
os.remove("demofile.txt")

import os
if os.path.exists("demofile.txt"):
  os.remove("demofile.txt")
else:
  print("The file does not exist")


delete foder:
import os
os.rmdir("myfolder")